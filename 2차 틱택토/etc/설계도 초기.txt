TicTacToe 클래스:
	메인함수
		startthegame 생성자
		while(isExit){
			startTheGame()
		}

StartTheGame 클래스:

	private string userChoice;
	private int winnerDefine;

	InformationForGame 생성자
	GamingWithComputer 생성자
	GamingWithUser 생성자
	InformationForGame.setMenu()
	userChoice = Console.Readline()
	예외 처리(숫자가 아닐 때, 숫자가 너무 클 때 -> userChoice[0]
		   ctrl  + c, ctrl + z 등등)
	switch(userChoice):
		case 1: int winnerDefine = GamingWithUser()
		case 2: int winnerDefine = GamingWithComputer()
		case 3: int winnerDefine = InformationForGame()

	int returnOrEnd()		// 클래스 구분 짓기
	{
		while(true)
		{
			console.Write("1. 다시 하기  2. 끝내기)
			console.Write("> 입력: ")
			userChoice = console.ReadLine()
			예외 처리
			while(true){
				console.Clear()
				console.WriteLine("1. 다시 하기  2. 끝내기)
				Console.WriteLine("잘못된 입력입니다. 주어진 메뉴에 해당하는 숫자 (1, 2) 중에서 입력하세요.")
				userChoice = console.ReadLine()
					if(userChoice[0] == 1 || userChoice[0] == 2) { break; }
			}
			if(userChoice[0] == 2){
				Console.WriteLine("정말 종료하시겠습니까?")
				Console.WriteLine("1. 메뉴로 돌아가기 2. 종료하기")
			}
		
EndingTheGame 클래스:



GamingwithComputer 클래스:
	
	string userChoice
	string computerChoice
	string winner;

	InformationForGame 생성자

	while(true)
	{
		userChoice = Console.ReadLine()
		예외 처리(입력상, 이미 선택)
		InformationForGame.UpdateTheField()
		Winner = InformationForGame.CheckCaseForWinning
		if(winner != 0) break;
		computerchoice
		InformationForGame.UpdateTheField()
		Winner = InformationForGame.CheckCaseForWinning -> 승자가 없으면 0, 유저 1, 컴퓨터 2
		if(winner != 0) break;
	}
	InformationForGame.ComputerWindecline()
	informationForGame.PrinttheWinner("Computer")
		
		

GamingWithUser 클래스:

	string user1Choice
	string user2rChoice
	string winner;

	InformationForGame 생성자
	while(true)
	{
		user1Choice = Console.ReadLine()
		예외 처리(입력상, 이미 선택)
		InformationForGame.UpdateTheField()
		Winner = InformationForGame.CheckCaseForWinning
		if(winner != 0) break;
		user2Choice = Console.ReadLine()
		예외 처리(입력상, 이미 선택)
		InformationForGame.UpdateTheField()
		Winner = InformationForGame.CheckCaseForWinning
		InformationForGame.UpdateTheField()
		Winner = InformationForGame.CheckCaseForWinning -> 승자가 없으면 0, 유저1 1, 유저2 2
		if(winner != 0) break;
	}

	if(winner == '1')
	InformationForGame.ComputerWindecline()
	informationForGame.PrinttheWinner("Computer")

InformationForGame 클래스:

	<변수>
	private char[] alreadyChosenPart = {'0', ..., '0'}
	int User1의 승리 횟수
	int User2의 승리 횟수
	int Computer의 승리 횟수
	char 보드판 배열
	char 승리 조건
	

	<함수>
	메뉴 세팅
	게임판 세팅
	스코어보드 세팅
	승리 출력
	승수 증가


메뉴 - > 선택(유저 간, 컴퓨터, 스코어보드) -> (if 유저) -> 게임판 세팅 -> while(true)(1번 유저 입력 -> 게임판 새로고침 -> 승리 조간 확인 -> 2번 유저 입력 -> 게임판 새로 고침 -> 승리 조건 확인) -> if 승리 조건 break -> 승리한 유저의 횟수 증가 -> 승리한 유저를 알려 주는 출력문 -> 게임 돌아가기, 게임 종료하기 -> (if return) 첫 번째로
							 (if end) 진짜 종료할 건지 묻기 -> 종료 혹은 메뉴로 돌아가기

						 -> (스코어보드) -> 스코어보드판 세팅